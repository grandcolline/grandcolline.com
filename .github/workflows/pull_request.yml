name: PR
on: [pull_request]

permissions:
  contents: read
  pull-requests: write

jobs:
  # デリバリー（ビルド&デプロイ)
  #delivery:
  #  uses: grandcolline/.github/.github/workflows/deploy_workers_with_bun.yml@main
  #  secrets: inherit
  #  with:
  #    command: versions upload --message "Deployed pages by GitHub Actions branch ${{ github.ref_name }}"
  #    build-artifacts-path: |
  #      dist/

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    outputs:
      status: ${{ steps.output.outputs.deploy-status }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2

      - name: Install dependencies # TODO: 無くしたい
        run: bun install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: versions upload --message "Deployed pages by GitHub Actions branch ${{ github.ref_name }}" --env production

      - name: Set output
        id: output
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentData = {
              environment: 'production',
              status: '${{ steps.deploy.outcome }}',
              url: '${{ steps.deploy.outputs.deployment-url }}' || 'N/A'
            };

            core.setOutput('deploy-status', JSON.stringify(deploymentData));

  comment:
    name: Comment
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'pull_request' # PR の場合はコメントを残す
    steps:
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const results = ${{ toJSON(needs.deploy.outputs) }};

            let body = '## 🚀 Deployment Results\n\n';
            body += '| Environment | Status | URL |\n';
            body += '| :---------- | :----- | :-- |\n';

            // 各環境の結果を解析して body に追加
            Object.values(results).forEach(result => {
              const data = JSON.parse(result);
              const statusEmoji = data.status === 'success' ? '✅' : '❌';
              body += `| ${data.environment} | ${statusEmoji} ${data.status} | ${data.url} |\n`;
            });
            body += `\n*Pusher: @${{ github.actor }}, Commit: ${{ github.event.pull_request.head.sha }}* \n`;

            // ボットコメントの識別子を追加
            body += '\n<!-- deploy-workers-with-bun-results -->';

            // 既存のコメントを探す
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('<!-- deploy-workers-with-bun-results -->')
            );

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新規コメントを作成
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }


  # コードの静的解析
  analysis:
    uses: grandcolline/.github/.github/workflows/code_analysis.yml@main
    secrets: inherit

  # PR の設定確認
  setting:
    uses: grandcolline/.github/.github/workflows/auto_assign.yml@main
    secrets: inherit
    if: github.event.action == 'opened' || github.event.action == 'ready_for_review'

